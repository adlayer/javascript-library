[
  {
    "tags": [
      {
        "type": "class",
        "string": "Site"
      },
      {
        "type": "constructor",
        "string": ""
      },
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "attributes",
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Abstract class for site</p>",
      "summary": "<p>Abstract class for site</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "var Site = function( attributes ){",
    "ctx": {
      "type": "function",
      "name": "Site",
      "string": "Site()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@property {String} id Unique site id</li>\n</ul>",
      "summary": "<ul>\n<li>@property {String} id Unique site id</li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "this.id = '';",
    "ctx": {
      "type": "property",
      "receiver": "this",
      "name": "id",
      "value": "''",
      "string": "this.id"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@property {String} name Name of site</li>\n</ul>",
      "summary": "<ul>\n<li>@property {String} name Name of site</li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "this.name = '';",
    "ctx": {
      "type": "property",
      "receiver": "this",
      "name": "name",
      "value": "''",
      "string": "this.name"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@property {Boolean} status true for active and  false for inactive</li>\n</ul>",
      "summary": "<ul>\n<li>@property {Boolean} status true for active and  false for inactive</li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "this.status = true;",
    "ctx": {
      "type": "property",
      "receiver": "this",
      "name": "status",
      "value": "true",
      "string": "this.status"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@property {Array} domains Collection of all allowed domains</li>\n</ul>",
      "summary": "<ul>\n<li>@property {Array} domains Collection of all allowed domains</li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "this.domains = [];",
    "ctx": {
      "type": "property",
      "receiver": "this",
      "name": "domains",
      "value": "[]",
      "string": "this.domains"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@method __construct\n<ul><li>@private</li>\n<li>@returns {Object} return this to allow chain pattern</li></ul></li>\n</ul>",
      "summary": "<ul>\n<li>@method __construct\n<ul><li>@private</li>\n<li>@returns {Object} return this to allow chain pattern</li></ul></li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "var __construct = (function(self){\n\t\t// initiate here\n\t\tfor( var attribute in attributes ){\n\t\t\tif( attributes.hasOwnProperty(attribute) ){\n\t\t\t\tself[attribute] = attributes[attribute];\n\t\t\t}\n\t\t}\n\t\treturn self;\n\t})(this);\n};",
    "ctx": {
      "type": "declaration",
      "name": "__construct",
      "value": "(function(self){",
      "string": "__construct"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@description Find for exact domain or subdomain\n<ul><li>@public</li>\n<li>@param {String} entry - Domain string</li>\n<li>@returns {Boolean} - True when found a domain and false for not</li>\n<li>@todo: change to regex</li></ul></li>\n</ul>",
      "summary": "<ul>\n<li>@description Find for exact domain or subdomain\n<ul><li>@public</li>\n<li>@param {String} entry - Domain string</li>\n<li>@returns {Boolean} - True when found a domain and false for not</li>\n<li>@todo: change to regex</li></ul></li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "Site.prototype.hasDomain = function(entry){\n\t\tvar self = this;\n\t\tvar result = false;\n\n\t\tfunction found(content, context){\n\t\t\treturn context.indexOf(content) !== -1;\n\t\t}\n\t\n\t\t// Found exact domain ?\n\t\tif( found(entry, this.domains ) ){\n\t\t\tresult = true;\n\t\t} else {\n\t\t\t// Run in all domains\n\t\t\tthis.domains.forEach(function(domain){\n\t\t\t\t// Current domain is a wildcard ?\n\t\t\t\tvar wildcard = found('*', domain);\n\t\t\t\tif( wildcard ){\n\t\t\t\t\t// Remove star\n\t\t\t\t\tdomain = domain.replace('*', '');\n\t\t\t\t\tif( found(domain, entry) ) result = true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn result;\n\t};",
    "ctx": {
      "type": "method",
      "constructor": "Site",
      "name": "hasDomain",
      "string": "Site.prototype.hasDomain()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@requires modules in browser\n<ul><li>@exports Event as Event</li></ul></li>\n</ul>",
      "summary": "<ul>\n<li>@requires modules in browser\n<ul><li>@exports Event as Event</li></ul></li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "exports.Site = Site;",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "Site",
      "value": "Site",
      "string": "exports.Site"
    }
  }
]