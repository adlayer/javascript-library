[
  {
    "tags": [
      {
        "type": "class",
        "string": "DomElement"
      },
      {
        "type": "link",
        "string": "https://developer.mozilla.org/en/DOM/element"
      }
    ],
    "description": {
      "full": "<p>Abstract class for dom/html elements </p>",
      "summary": "<p>Abstract class for dom/html elements </p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "var DomElement = function(){",
    "ctx": {
      "type": "function",
      "name": "DomElement",
      "string": "DomElement()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@property {String} id Id attribute of object</li>\n</ul>",
      "summary": "<ul>\n<li>@property {String} id Id attribute of object</li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "this.id = '';",
    "ctx": {
      "type": "property",
      "receiver": "this",
      "name": "id",
      "value": "''",
      "string": "this.id"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@property {Object} element Dom element itself</li>\n</ul>",
      "summary": "<ul>\n<li>@property {Object} element Dom element itself</li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "this.element = {};\n};",
    "ctx": {
      "type": "property",
      "receiver": "this",
      "name": "element",
      "value": "{}",
      "string": "this.element"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@method create\n<ul><li>@param {String} tagName</li>\n<li>@param {Object} document</li>\n<li>@static</li>\n<li>@returns {Object} element</li></ul></li>\n</ul>",
      "summary": "<ul>\n<li>@method create\n<ul><li>@param {String} tagName</li>\n<li>@param {Object} document</li>\n<li>@static</li>\n<li>@returns {Object} element</li></ul></li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "DomElement.create = function(tagName, document){\n\t\treturn document.createElement(tagName);\n\t};",
    "ctx": {
      "type": "method",
      "receiver": "DomElement",
      "name": "create",
      "string": "DomElement.create()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@method create\n<ul><li>@param {String} tagName</li>\n<li>@param {Object} document</li>\n<li>@public</li>\n<li>@returns {Object} this - Chainable method</li></ul></li>\n</ul>",
      "summary": "<ul>\n<li>@method create\n<ul><li>@param {String} tagName</li>\n<li>@param {Object} document</li>\n<li>@public</li>\n<li>@returns {Object} this - Chainable method</li></ul></li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "DomElement.prototype.create = function(tagName, document){\n\t\t//\tfile global || adlayer js module wrapper || passed document context\n\t\tdocument = this.document || global.document || document;\n\t\tthis.element = DomElement.create(tagName, document);\n\t\treturn this;\n\t};",
    "ctx": {
      "type": "method",
      "constructor": "DomElement",
      "name": "create",
      "string": "DomElement.prototype.create()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@method setAttributes\n<ul><li>@param {Object} attributes</li>\n<li>@public</li>\n<li>@returns {Object} this - Chainable method</li></ul></li>\n</ul>",
      "summary": "<ul>\n<li>@method setAttributes\n<ul><li>@param {Object} attributes</li>\n<li>@public</li>\n<li>@returns {Object} this - Chainable method</li></ul></li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "DomElement.prototype.setAttributes = function(attributes){\n\t\tvar merge = require('../utils/merge').merge;\n\t\tmerge(this.element, attributes);\n\t};",
    "ctx": {
      "type": "method",
      "constructor": "DomElement",
      "name": "setAttributes",
      "string": "DomElement.prototype.setAttributes()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@method append\n<ul><li>@param {Object} child</li>\n<li>@public</li>\n<li>@returns {Object} this - Chainable method</li></ul></li>\n</ul>",
      "summary": "<ul>\n<li>@method append\n<ul><li>@param {Object} child</li>\n<li>@public</li>\n<li>@returns {Object} this - Chainable method</li></ul></li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "DomElement.prototype.append = function(child){\n\t\tthis.element.appendChild(child);\n\t\treturn this;\n\t};",
    "ctx": {
      "type": "method",
      "constructor": "DomElement",
      "name": "append",
      "string": "DomElement.prototype.append()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@method findParentTag\n<ul><li>@param {String} tag UPPERCASE tag name</li>\n<li>@public</li>\n<li>@returns {Object} parentElement</li></ul></li>\n</ul>",
      "summary": "<ul>\n<li>@method findParentTag\n<ul><li>@param {String} tag UPPERCASE tag name</li>\n<li>@public</li>\n<li>@returns {Object} parentElement</li></ul></li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "DomElement.prototype.findParentTag = function(tag){\n\t\tvar parent = this.element.parentNode;\n\t\twhile(parent.nodeName != tag){\n\t\t\tparent = parent.parentNode;\n\t\t}\n\t\treturn parent;\n\t};",
    "ctx": {
      "type": "method",
      "constructor": "DomElement",
      "name": "findParentTag",
      "string": "DomElement.prototype.findParentTag()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<ul>\n<li>@method addDomEventListener\n<ul><li>@param {String} type Event name like 'click', 'load', 'mouseover'</li>\n<li>@param {Function} eventListener Callback for event trigger</li>\n<li>@public</li>\n<li>@returns {Object} return this to allow chainability</li></ul></li>\n</ul>",
      "summary": "<ul>\n<li>@method addDomEventListener\n<ul><li>@param {String} type Event name like 'click', 'load', 'mouseover'</li>\n<li>@param {Function} eventListener Callback for event trigger</li>\n<li>@public</li>\n<li>@returns {Object} return this to allow chainability</li></ul></li>\n</ul>",
      "body": ""
    },
    "ignore": false,
    "code": "DomElement.prototype.addDomEventListener = function(type, eventListener){\n\t\tif(typeof addEventListener === 'function'){\n\t\t\tthis.element.addEventListener(type, eventListener, false);\n\t\t} else if(typeof attachEvent === 'function'){\n\t\t\tthis.element.attachEvent('on' + type, eventListener);\n\t\t} else {\n\t\t\tthis.element['on' + type] = eventListener;\n\t\t}\n\t\treturn this;\n\t};\n\n\n\texports.DomElement = DomElement;",
    "ctx": {
      "type": "method",
      "constructor": "DomElement",
      "name": "addDomEventListener",
      "string": "DomElement.prototype.addDomEventListener()"
    }
  }
]